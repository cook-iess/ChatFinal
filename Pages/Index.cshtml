@page
<div class="container">

    <div class="row p-1 gap-3">
        <div class="col-1">User</div>
        <div class=""><input type="text" id="userInput" class="form-control" placeholder="YourName" /></div>
    </div>
    <div class="row p-1  gap-3">
        <div class="col-2">Message</div>
        <div class=""><input type="text" class="w-100 form-control" id="messageInput" placeholder="Message" required /></div>
    </div>
    <div class="row p-1  gap-5">
        <div class=" text-end">
            <input type="button" class="form-control" id="sendButton" value="Send Message" required />
        </div>
    </div>
    <div class="row p-1  gap-3">
        <div class="col-6">
        </div>
    </div>
    <hr />
    <div class="row p-1  gap-3">
        <div class="col-6">
            <ul id="messagesList"></ul>
        </div>
    </div>
</div>
<script src="/js/signalr/dist/browser/signalr.js"></script>
<script>
    "use strict";

    var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();


    //Disable the send button until connection is established.
    document.getElementById("sendButton").disabled = true;

    connection.on("ReceiveMessage", function (user, message) {
        var li = document.createElement("li");
        document.getElementById("messagesList").appendChild(li);
        // We can assign user-supplied strings to an element's textContent because it
        // is not interpreted as markup. If you're assigning in any other way, you
        // should be aware of possible script injection concerns.
        li.textContent = `${user} says ${message}`;
    });

    connection.start().then(function () {
        document.getElementById("sendButton").disabled = false;
    }).catch(function (err) {
        return console.error(err.toString());
    });

    document.getElementById("sendButton").addEventListener("click", function (event) {
        var user = document.getElementById("userInput").value;
        var message = document.getElementById("messageInput").value;

        connection.invoke("SendMessage", user, message).catch(function (err) {
            return console.error(err.toString());
        });
        event.preventDefault();
    });
</script>